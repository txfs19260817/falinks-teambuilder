generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Pokepaste {
  id         String   @id @default(cuid())
  author     String
  title      String
  paste      String
  notes      String?
  source     String?
  format     String
  createdAt  DateTime @default(now())
  rentalCode String?
  isOfficial Boolean  @default(true)
  isPublic   Boolean  @default(false)
  jsonPaste  Json?

  @@index([format, createdAt(sort: Desc)])
}

model replay {
  id         String   @id(map: "id")
  p1         String   @db.VarChar(45)
  p2         String   @db.VarChar(45)
  format     String   @db.VarChar(45)
  uploadtime DateTime @unique(map: "uploadtime", sort: Desc) @db.Timestamp(6)
  log        String
  rating     Int      @default(1000) @db.SmallInt
  p1team     String[]
  p2team     String[]

  @@unique([p1, uploadtime], map: "p1")
  @@unique([p2, uploadtime], map: "p2")
  @@index([format, uploadtime(sort: Desc)], map: "format")
}

model Tournament {
  id         Int    @id @default(autoincrement())
  name       String   @db.VarChar(128)
  format     String   @db.VarChar(45)
  date       DateTime @db.Timestamp(6)
  country    String? @db.VarChar(2) // ISO 3166-1 alpha-2
  source     String
  players    Int     @default(0)
  topcut     Int     @default(0) @db.SmallInt // topcut size
  teams      TournamentTeam[]

  @@index([format, date(sort: Desc)])
}

model TournamentTeam {
  id         Int    @id @default(autoincrement())
  author     String
  country    String? @db.VarChar(2) // ISO 3166-1 alpha-2
  standing   Int
  paste      String
  tournament Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int

  @@index([tournamentId, standing(sort: Asc)])
}
